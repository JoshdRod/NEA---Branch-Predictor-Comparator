section .data
    array db 98, 78, 27, 72, 65, 25, 47, 86, 10, 45, 6, 36, 28, 90, 56, 64, 39, 62, 8, 35, 75, 43, 58, 42, 81, 29, 82, 19, 94, 70, 22, 2, 63, 51, 18, 87, 54, 61, 30, 59, 24, 48, 46, 69, 84, 85, 57, 44, 89, 20, 53, 96, 77, 92, 14, 17, 34, 26, 100, 40, 31, 66, 79, 9 ; Initialised array

section .text
        
    ; (both rbx and rbp are caller owned)
    ; set pointer s to first element in array (i)
    mov rbx, array
    ; set pointer e to the end of the array (start + length - 1 (2)) (j)
    mov rbp, array+49
    ; set current pointer c equal to s
    mov rdi, rbx
    ; Start
    jmp .mainLoop
    
    .mainLoop:
        ; Check if at end of pass (current = end)
        cmp rdi, rbp
        je .endPass
        
        ; compare a[current] to a[current + 1], if a[c] > a[c + 1], swap
        mov r10b, [rdi] ; CPU cannot perform memory - memory operations, as this used to be very hard to wire in to a PCB
        cmp r10b, [rdi+1] ; As a result, we need to load one mem. item into a register
        jg .swap

        jmp .endTurn

    .swap:   
        mov r11b, [rdi+1] ; Need to store both in registers before swap, as CPU cannot do mem - mem operations
        mov [rdi], r11b
        mov [rdi+1], r10b
        
        jmp .endTurn

    .endTurn:
        ; increment c and loop again!
        inc rdi
        jmp .mainLoop
        
    .endPass:
        ; e -= 1
        dec rbp
        ; if s = e, end
        cmp rbx, rbp
        je .end
        ; Set c = start, and go again!
        mov rdi, rbx
        jmp .mainLoop

    .end:
        mov rdi, 1 ; stdout
        mov rsi, array ; msg
        mov rdx, 50 ; size
        mov rax, 1 ; write
        syscall

        mov rdi, 0 ; status code (success!)
        mov rax, 60 ; exit
        syscall
